@import "compass";

/* =Alignment & Positioning
----------------------------------------------- */
@mixin center() {
	margin-right: auto;
	margin-left: auto;
}

@mixin max-width( $max-width: 1030px, $padding-left: 25px, $padding-right: 25px ) {
	max-width: $max-width;
	padding-left: $padding-left;
	padding-right: $padding-right;

	@media only screen and (min-width: ($max-width + $padding-left + $padding-right) ) {
		padding-left: 0;
		padding-right: 0;
	}
}

@mixin hide-but-keep {
	display: none;
}


/* =Media
----------------------------------------------- */
@mixin svg( $filename, $path: '../images/', $background-color: transparent, $background-position: left center, $background-repeat: no-repeat, $background-size: 100% 100% ) {
	background: $background-color url( #{$path}#{$filename}.png ) $background-position $background-repeat;
	background-image: url( #{$path}#{$filename}.svg ), none;
	@include background-size( $background-size );
}

@mixin replace-with-svg( $filename, $width: 100px, $height: 100px, $path: '../images/' ) {
	@include svg( $filename, $path );
	background-repeat: no-repeat;
	display: block;
	height: $height;
	line-height: $height;
	overflow: hidden;
	text-indent: 100%;
	white-space: nowrap;
	width: $width;
	max-width: 100%;
}

@mixin background-size( $background-size ) {
	background-size: $background-size;
	-ms-behavior: url( "../js/backgroundsize.min.htc" );
}


/* =Forms
----------------------------------------------- */
@mixin placeholder( $color, $font-size: inherit, $font-style: normal ) {
	::-webkit-input-placeholder {
		color: $color;
		font-size: $font-size;
		font-style: $font-style;
	}

	:-moz-placeholder { /* Firefox 18- */
		color: $color;
		font-size: $font-size;
		font-style: $font-style;  
	}

	::-moz-placeholder {  /* Firefox 19+ */
		color: $color;
		font-size: $font-size;
		font-style: $font-style;  
	}

	:-ms-input-placeholder {  
		color: $color;
		font-size: $font-size;
		font-style: $font-style;  
	}
}


/* =High Definition
----------------------------------------------- */
// Sample usage:
// background: url( "../images/sprites.png" ) -168px -9px no-repeat;
// @include retinafy( "sprites@2x.png", 250, 250 );
@mixin retinafy( $image, $width-1x: 1300, $height-1x: 750 ) {
	@media
	(-webkit-min-device-pixel-ratio: 2), 
	(min-resolution: 192dpi) {
		background-image: url( "../images/#{$image}" );
		background-size: #{$width-1x}px #{$height-1x}px;
	}
}


/* =Typography
----------------------------------------------- */
@mixin font-size( $sizeValue: 16 ) {
	font-size: $sizeValue + px;
	font-size: ($sizeValue / 10) + rem;
}

@mixin responsive-font-size( $font-size-max: 40 ) {
	@include font-size( $font-size-max * 0.75 );

	@media only screen and (min-width: 481px) {
		@include font-size( $font-size-max );
	}
}


// Don't forget: add these fonts to the _s_change_tinymce_fonts() function in /inc/tinymce.php
@mixin enzo( $weight: 300 ) {
	font-family: 'ff-enzo-web', 'FF Enzo', sans-serif;
	font-weight: $weight;

	// Provide reasonable font weight until Enzo loads
	.wf-loading & { 
		font-weight: 400;
	}
}

@mixin helvetica( $weight: 400 ) {
	font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
	font-weight: $weight;
}


/* =Special effects
----------------------------------------------- */
@mixin transition( $transitions... ) {
	-moz-transition: $transitions;
	-webkit-transition: $transitions;
	-o-transition: $transitions;
	transition: $transitions;
}

/* =Media query helpers
----------------------------------------------- */
// Here are some variables, then a mixin and then an application of the mixin - this will only compile using Sass 3.2 

//variables
$XS: 12.5em; // 200px
$S: 341px;
$SM: 35em; // 560px
$M: 750px;
$L: 1250px;
$XL: 1430px;
$XXL: 2000px;

//mixin
@mixin MQ($canvas) {
	@if $canvas == XS {
		@media only screen and (min-width: $XS) and (max-width: $S - 1) { @content; }
	}
	@else if $canvas == S {
		@media only screen and (min-width: $S) and (max-width: $M - 1) { @content; }
	}
	@else if $canvas == M {
		@media only screen and (min-width: $M) and (max-width: $L - 1) { @content; }
	}
	@else if $canvas == L {
		@media only screen and (min-width: $L) and (max-width: $XL - .01) { @content; }
	}
	@else if $canvas == XL {
		@media only screen and (min-width: $XL) and (max-width: $XXL - .01) { @content; }
	}
	@else if $canvas == XXL {
		@media only screen and (min-width: $XXL) { @content; }
	}
	@else if $canvas == XSplus {
		@media only screen and (min-width: $XS) { @content; }
	}
	@else if $canvas == Splus {
		@media only screen and (min-width: $S) { @content; }
	}
	@else if $canvas == Mplus {
		@media only screen and (min-width: $M) { @content; }
	}
	@else if $canvas == Lplus {
		@media only screen and (min-width: $L) { @content; }
	}
	@else if $canvas == XLplus {
		@media only screen and (min-width: $XL) { @content; }
	}
	@else if $canvas == XXLplus {
		@media only screen and (min-width: $XXL) { @content; }
	}
	@else if $canvas == XSneg {
		@media only screen and (max-width: $XS) { @content; }
	}
	@else if $canvas == Sneg {
		@media only screen and (max-width: $S) { @content; }
	}
	@else if $canvas == Mneg {
		@media only screen and (max-width: $M) { @content; }
	}
	@else if $canvas == Lneg {
		@media only screen and (max-width: $L) { @content; }
	}
	@else if $canvas == XLneg {
		@media only screen and (max-width: $XL) { @content; }
	}
	@else if $canvas == XXLneg {
		@media only screen and (max-width: $XXL) { @content; }
	}
	@else if $canvas == StoL {
		@media only screen and (min-width: $S) and (max-width: $L - .01) { @content; }
	}
}

//demonstration of use
// .h1 {
// 	@include MQ(XS) { 
// 		font-size: 0.9em;
// 	}
// 	@include MQ(S) { 
// 		font-size: 1em;
// 	}
// 	@include MQ(M) { 
// 		font-size: 1.1em;
// 	}
// 	@include MQ(L) { 
// 		font-size: 1.2em;
// 	}
// 	@include MQ(XL) { 
// 		font-size: 1.3em;
// 	}
// 	@include MQ(XXL) { 
// 		font-size: 1.4em;
// 	}
// }